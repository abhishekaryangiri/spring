package com.quizapp.controller;

import com.quizapp.model.Question;
import com.quizapp.service.QuizService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/quiz")
public class QuizController {

    @Autowired
    private QuizService quizService;

    @PostMapping("/start/{user_id}")
    public ResponseEntity<String> startQuiz(@PathVariable String user_id) {
        try {
            Long parsedUserId = Long.parseLong(user_id);
            String response = quizService.startQuiz(parsedUserId);
            return ResponseEntity.ok(response);
        } catch (NumberFormatException e) {
            return ResponseEntity.badRequest().body("Invalid userId: must be a numeric value");
        }
    }


    @GetMapping("/question")
    public ResponseEntity<Question> getRandomQuestion() {
        Question question = quizService.getRandomQuestion();
        if (question == null) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                     .body(new Question("No question found", "", "", "", "", 0));
        }
        return ResponseEntity.ok(question);
    }

    @GetMapping("/process")
    public ResponseEntity<String> processQuiz(@RequestParam(value = "questionId", defaultValue = "0") Long question_id) {
        if (question_id == 0) {
            return ResponseEntity.badRequest().body("questionId is missing or invalid");
        }
        return ResponseEntity.ok("Question processed: " + question_id);
    }


    
    @PostMapping("/submit/{user_id}")
    public ResponseEntity<String> submitAnswer(
        @PathVariable Long user_id, 
        @RequestParam Long question_id, 
        @RequestParam int selected_option) {

        if (question_id == null || selected_option == 0) {
            return ResponseEntity.badRequest().body("Invalid or missing questionId or selectedOption");
        }
        try {
            return ResponseEntity.ok(quizService.submitAnswer(user_id, question_id, selected_option));
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                                 .body("Error processing request: " + e.getMessage());
        }
    }

    
    @GetMapping("/result/{user_id}")
    public String getQuizResult(@PathVariable Long user_id) {
        return quizService.getQuizResult(userId);
    }
}